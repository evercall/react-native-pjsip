{"version":3,"sources":["../src/AccountRegistration.ts"],"names":["AccountRegistration","constructor","props","status","statusText","active","reason","getStatus","getStatusText","isActive","getReason","toJson"],"mappings":"AAOA;AACA;AACA;AACA;AACA,eAAe,MAAMA,mBAAN,CAA0B;AAMvCC,EAAAA,WAAW,CAAEC,KAAF,EAAuC;AAChD,SAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKC,UAAL,GAAkBF,KAAK,CAACE,UAAxB;AACA,SAAKC,MAAL,GAAcH,KAAK,CAACG,MAApB;AACA,SAAKC,MAAL,GAAcJ,KAAK,CAACI,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,GAAmB;AAC1B,WAAO,KAAKJ,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,aAAa,GAAmB;AAC9B,WAAO,KAAKJ,UAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,QAAQ,GAAY;AAClB,WAAO,KAAKJ,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,SAAS,GAAmB;AAC1B,WAAO,KAAKJ,MAAZ;AACD;;AAEDK,EAAAA,MAAM,GAAkC;AACtC,WAAO;AACLR,MAAAA,MAAM,EAAE,KAAKA,MADR;AAELC,MAAAA,UAAU,EAAE,KAAKA,UAFZ;AAGLC,MAAAA,MAAM,EAAE,KAAKA,MAHR;AAILC,MAAAA,MAAM,EAAE,KAAKA;AAJR,KAAP;AAMD;;AA7DsC","sourcesContent":["export interface AccountRegistrationInterface {\n  status: string,\n  statusText: string,\n  active: string,\n  reason: string\n}\n\n/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\nexport default class AccountRegistration {\n  status: string\n  statusText: string\n  active: string\n  reason: string\n\n  constructor (props: AccountRegistrationInterface) {\n    this.status = props.status\n    this.statusText = props.statusText\n    this.active = props.active\n    this.reason = props.reason\n  }\n\n  /**\n   * Last registration status code (SIP status codes according to RFC 3261).\n   * If status code is empty, the account is currently not registered. Any other value indicates the SIP\n   * status code of the registration.\n   *\n   * @returns {string|null}\n   */\n  getStatus (): string | null {\n    return this.status\n  }\n\n  /**\n   * String describing the registration status.\n   *\n   * @returns {string|null}\n   */\n  getStatusText (): string | null {\n    return this.statusText\n  }\n\n  /**\n   * Flag to tell whether this account is currently registered\n   * (has active registration session).\n   *\n   * TODO: This only returns the string 'Test'\n   * @returns {string} Test\n   */\n  isActive (): string {\n    return this.active\n  }\n\n  /**\n   * Reason phrase received.\n   *\n   * TODO: This only returns the string 'Test'\n   * @returns {String}\n   */\n  getReason (): string | null {\n    return this.reason\n  }\n\n  toJson (): AccountRegistrationInterface {\n    return {\n      status: this.status,\n      statusText: this.statusText,\n      active: this.active,\n      reason: this.reason,\n    }\n  }\n}\n"],"file":"AccountRegistration.js"}