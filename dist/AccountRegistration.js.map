{"version":3,"sources":["../src/AccountRegistration.ts"],"names":["AccountRegistration","constructor","props","status","statusText","active","expires"],"mappings":"AAOA;AACA;AACA;AACA;AACA,eAAe,MAAMA,mBAAN,CAA0D;AACvE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AAGEC,EAAAA,WAAW,CAAEC,KAAF,EAA+B;AACxC,SAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKC,UAAL,GAAkBF,KAAK,CAACE,UAAxB;AACA,SAAKC,MAAL,GAAcH,KAAK,CAACG,MAApB;AACA,SAAKC,OAAL,GAAeJ,KAAK,CAACI,OAArB;AACD;;AA9BsE","sourcesContent":["export interface IAccountRegistration {\n  status: string,\n  statusText: string,\n  active: string,\n  expires: number\n}\n\n/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\nexport default class AccountRegistration implements IAccountRegistration {\n  /**\n   * Last registration status code (SIP status codes according to RFC 3261).\n   * If status code is empty, the account is currently not registered. Any other value indicates the SIP\n   * status code of the registration.\n   */\n  status: string\n  /**\n   * String describing the registration status.\n   */\n  statusText: string\n  /**\n   * Flag to tell whether this account is currently registered\n   * (has active registration session).\n   *\n   * TODO: This only returns the string 'Test'\n   */\n  active: string\n  /**\n   * Reason phrase received.\n   *\n   * TODO: This only returns the string 'Test'\n   */\n  expires: number\n\n  constructor (props: IAccountRegistration) {\n    this.status = props.status\n    this.statusText = props.statusText\n    this.active = props.active\n    this.expires = props.expires\n  }\n}\n"],"file":"AccountRegistration.js"}