{"version":3,"sources":["../src/Call.ts"],"names":["PJSUAVideoReqKeyframeMethod","PJSUACallFlags","PJSIPInviteState","Call","constructor","id","callId","accountId","localContact","localUri","remoteContact","remoteUri","state","stateText","held","muted","speaker","connectDuration","totalDuration","remoteOfferer","remoteAudioCount","remoteVideoCount","audioCount","videoCount","lastStatusCode","lastReason","media","provisionalMedia","remoteNumber","remoteName","match","_id","_callId","_accountId","_localContact","_localUri","_remoteContact","_remoteUri","_state","_stateText","_held","_muted","_speaker","_connectDuration","_totalDuration","_remoteOfferer","_remoteAudioCount","_remoteVideoCount","_remoteNumber","_remoteName","_audioCount","_videoCount","_lastStatusCode","_lastReason","_media","_provisionalMedia","_constructionTime","Math","round","Date","getTime","getId","getAccountId","getCallId","getTotalDuration","time","offset","getConnectDuration","getFormattedTotalDuration","_formatTime","getFormattedConnectDuration","getLocalContact","getLocalUri","getRemoteContact","getRemoteUri","getRemoteName","getRemoteNumber","getRemoteFormattedNumber","getState","getStateText","isHeld","isMuted","isSpeaker","isTerminated","getRemoteOfferer","getRemoteAudioCount","getRemoteVideoCount","getAudioCount","getVideoCount","getLastStatusCode","getLastReason","getMedia","getProvisionalMedia","seconds","isNaN","hours","parseInt","String","minutes","result"],"mappings":"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","sourcesContent":["/**\n * Enumeration of video keyframe request methods. Keyframe request is triggered by decoder, usually when the incoming\n * video stream cannot be decoded properly due to missing video keyframe.\n */\nexport enum PJSUAVideoReqKeyframeMethod {\n  /**\n   * Requesting keyframe via SIP INFO message. Note that incoming keyframe request via SIP INFO will always be handled\n   * even if this flag is unset.\n   */\n  PJSUA_VID_REQ_KEYFRAME_SIP_INFO = 'PJSUA_VID_REQ_KEYFRAME_SIP_INFO',\n  /**\n   * Requesting keyframe via Picture Loss Indication of RTCP feedback. This is currently not supported.\n   */\n  PJSUA_VID_REQ_KEYFRAME_RTCP_PLI = 'PJSUA_VID_REQ_KEYFRAME_RTCP_PLI'\n}\n\n/**\n * Flags to be given to various call APIs. More than one flags may be specified by bitmasking them.\n */\nexport enum PJSUACallFlags {\n  /**\n   * When the call is being put on hold, specify this flag to unhold it. This flag is only valid for\n   * pjsua_call_reinvite() and pjsua_call_update(). Note: for compatibility reason, this flag must have value of 1\n   * because previously the unhold option is specified as boolean value.\n   */\n  PJSUA_CALL_UNHOLD = 'PJSUA_CALL_UNHOLD',\n\n  /**\n   * Update the local invite session's contact with the contact URI from the account. This flag is only valid for\n   * pjsua_call_set_hold2(), pjsua_call_reinvite() and pjsua_call_update(). This flag is useful in IP address change\n   * situation, after the local account's Contact has been updated (typically with re-registration) use this flag to\n   * update the invite session with the new Contact and to inform this new Contact to the remote peer with the outgoing\n   * re-INVITE or UPDATE.\n   */\n  PJSUA_CALL_UPDATE_CONTACT = 'PJSUA_CALL_UPDATE_CONTACT',\n\n  /**\n   * Include SDP \"m=\" line with port set to zero for each disabled media (i.e when aud_cnt or vid_cnt is set to zero).\n   * This flag is only valid for pjsua_call_make_call(), pjsua_call_reinvite(), and pjsua_call_update().\n   * Note that even this flag is applicable in pjsua_call_reinvite() and pjsua_call_update(), it will only take\n   * effect when the re-INVITE/UPDATE operation regenerates SDP offer, such as changing audio or video count in\n   * the call setting.\n   */\n  PJSUA_CALL_INCLUDE_DISABLED_MEDIA = 'PJSUA_CALL_INCLUDE_DISABLED_MEDIA',\n  /**\n   * Do not send SDP when sending INVITE or UPDATE. This flag is only valid for pjsua_call_make_call(),\n   * pjsua_call_reinvite()/reinvite2(), or pjsua_call_update()/update2(). For re-invite/update, specifying\n   * PJSUA_CALL_UNHOLD will take precedence over this flag.\n   */\n  PJSUA_CALL_NO_SDP_OFFER = 'PJSUA_CALL_NO_SDP_OFFER',\n\n  /**\n   * Deinitialize and recreate media, including media transport. This flag is useful in IP address change situation,\n   * if the media transport address (or address family) changes, for example during IPv4/IPv6 network handover.\n   * This flag is only valid for pjsua_call_reinvite()/reinvite2(), or pjsua_call_update()/update2().\n   *\n   * Warning: If the re-INVITE/UPDATE fails, the old media will not be reverted.\n   */\n  PJSUA_CALL_REINIT_MEDIA = 'PJSUA_CALL_REINIT_MEDIA',\n\n  /**\n   * Update the local invite session's Via with the via address from the account. This flag is only valid for\n   * pjsua_call_set_hold2(), pjsua_call_reinvite() and pjsua_call_update(). Similar to the flag\n   * PJSUA_CALL_UPDATE_CONTACT above, this flag is useful in IP address change situation, after the local account's\n   * Via has been updated (typically with re-registration).\n   */\n  PJSUA_CALL_UPDATE_VIA = 'PJSUA_CALL_UPDATE_VIA',\n\n  /**\n   * Update dialog target to URI specified in pjsua_msg_data.target_uri. This flag is only valid for\n   * pjsua_call_set_hold(), pjsua_call_reinvite(), and pjsua_call_update(). This flag can be useful in IP address change\n   * scenario where IP version has been changed and application needs to update target IP address.\n   */\n  PJSUA_CALL_UPDATE_TARGET = 'PJSUA_CALL_UPDATE_TARGET'\n\n}\n\n/**\n * This enumeration describes invite session state\n */\nexport enum PJSIPInviteState {\n  /** Before INVITE is sent or received */\n  PJSIP_INV_STATE_NULL = 'PJSIP_INV_STATE_NULL',\n  /** After INVITE is sent */\n  PJSIP_INV_STATE_CALLING = 'PJSIP_INV_STATE_CALLING',\n  /** After INVITE is received */\n  PJSIP_INV_STATE_INCOMING = 'PJSIP_INV_STATE_INCOMING',\n  /** After response with To tag */\n  PJSIP_INV_STATE_EARLY = 'PJSIP_INV_STATE_EARLY',\n  /** After 2xx is sent/received */\n  PJSIP_INV_STATE_CONNECTING = 'PJSIP_INV_STATE_CONNECTING',\n  /** After ACK is sent/received */\n  PJSIP_INV_STATE_CONFIRMED = 'PJSIP_INV_STATE_CONFIRMED',\n  /** Session is terminated */\n  PJSIP_INV_STATE_DISCONNECTED = 'PJSIP_INV_STATE_DISCONNECTED',\n}\n\nexport type CallData = {\n  id: number,\n  callId: string,\n  accountId: number,\n  localContact: string,\n  localUri: string,\n  remoteContact: string,\n  remoteUri: string,\n  state: PJSIPInviteState,\n  stateText: string,\n  held: boolean,\n  muted: boolean,\n  speaker: boolean,\n  connectDuration: number,\n  totalDuration: number,\n  remoteOfferer: number,\n  remoteAudioCount: number,\n  remoteVideoCount: number,\n  remoteNumber: string,\n  remoteName: string,\n  audioCount: number,\n  videoCount: number,\n  lastStatusCode: string,\n  lastReason: string,\n  media: string,\n  provisionalMedia: string\n}\n\n/**\n * This class describes the information and current status of a call.\n */\nclass Call {\n  _id: number\n  _callId: string\n  _accountId: number\n  _localContact: string\n  _localUri: string\n  _remoteContact: string\n  _remoteUri: string\n  _state: PJSIPInviteState\n  _stateText: string\n  _held: boolean\n  _muted: boolean\n  _speaker: boolean\n  _connectDuration: number\n  _totalDuration: number\n  _remoteOfferer: number\n  _remoteAudioCount: number\n  _remoteVideoCount: number\n  _remoteNumber: string\n  _remoteName: string\n  _audioCount: number\n  _videoCount: number\n  _lastStatusCode: string\n  _lastReason: string\n  _media: string\n  _provisionalMedia: string\n  _constructionTime: number\n\n  constructor ({\n    id,\n    callId,\n    accountId,\n    localContact,\n    localUri,\n    remoteContact,\n    remoteUri,\n    state,\n    stateText,\n    held,\n    muted,\n    speaker,\n    connectDuration,\n    totalDuration,\n    remoteOfferer,\n    remoteAudioCount,\n    remoteVideoCount,\n    audioCount,\n    videoCount,\n    lastStatusCode,\n    lastReason,\n    media,\n    provisionalMedia,\n  }: CallData) {\n    let remoteNumber = null\n    let remoteName = null\n\n    if (remoteUri) {\n      let match = remoteUri.match(/\"([^\"]+)\" <sip:([^@]+)@/)\n\n      if (match) {\n        remoteName = match[1]\n        remoteNumber = match[2]\n      } else {\n        match = remoteUri.match(/sip:([^@]+)@/)\n\n        if (match) {\n          remoteNumber = match[1]\n        }\n      }\n    }\n\n    this._id = id\n    this._callId = callId\n    this._accountId = accountId\n    this._localContact = localContact\n    this._localUri = localUri\n    this._remoteContact = remoteContact\n    this._remoteUri = remoteUri\n    this._state = state\n    this._stateText = stateText\n    this._held = held\n    this._muted = muted\n    this._speaker = speaker\n    this._connectDuration = connectDuration\n    this._totalDuration = totalDuration\n    this._remoteOfferer = remoteOfferer\n    this._remoteAudioCount = remoteAudioCount\n    this._remoteVideoCount = remoteVideoCount\n    this._remoteNumber = remoteNumber\n    this._remoteName = remoteName\n    this._audioCount = audioCount\n    this._videoCount = videoCount\n    this._lastStatusCode = lastStatusCode\n    this._lastReason = lastReason\n\n    this._media = media\n    this._provisionalMedia = provisionalMedia\n\n    this._constructionTime = Math.round(new Date().getTime() / 1000)\n  }\n\n  /**\n   * Call identification.\n   * @returns {int}\n   */\n  getId (): number {\n    return this._id\n  }\n\n  /**\n   * The account ID where this call belongs.\n   * @returns {int}\n   */\n  getAccountId (): number {\n    return this._accountId\n  }\n\n  /**\n   * Dialog Call-ID string.\n   *\n   * @returns {String}\n   */\n  getCallId (): string {\n    return this._callId\n  }\n\n  /**\n   * Up-to-date call duration in seconds.\n   * Use local time to calculate actual call duration.\n   *\n   * @public\n   * @returns {int}\n   */\n  getTotalDuration (): number {\n    let time = Math.round(new Date().getTime() / 1000)\n    let offset = time - this._constructionTime\n\n    return this._totalDuration + offset\n  }\n\n  /**\n   * Up-to-date call connected duration (zero when call is not established)\n   *\n   * @returns {int}\n   */\n  getConnectDuration (): number {\n    if (this._connectDuration < 0 || this._state == 'PJSIP_INV_STATE_DISCONNECTED') {\n      return this._connectDuration\n    }\n\n    let time = Math.round(new Date().getTime() / 1000)\n    let offset = time - this._constructionTime\n\n    return this._connectDuration + offset\n  }\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedTotalDuration (): string {\n    return this._formatTime(this.getTotalDuration())\n  }\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedConnectDuration (): string {\n    return this._formatTime(this.getConnectDuration())\n  }\n\n  /**\n   * Local Contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalContact (): string {\n    return this._localContact\n  }\n\n  /**\n   * Local URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalUri (): string {\n    return this._localUri\n  }\n\n  /**\n   * Remote contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteContact (): string {\n    return this._remoteContact\n  }\n\n  /**\n   * Remote URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteUri (): string {\n    return this._remoteUri\n  }\n\n  /**\n   * Callee name. Could be null if no name specified in URI.\n   * @returns {String}\n   */\n  getRemoteName (): string {\n    return this._remoteName\n  }\n\n  /**\n   * Callee number\n   * @returns {String}\n   */\n  getRemoteNumber (): string {\n    return this._remoteNumber\n  }\n\n  /**\n   * @returns {String}\n   */\n  getRemoteFormattedNumber (): string {\n    if (this._remoteName && this._remoteNumber) {\n      return `${this._remoteName} <${this._remoteNumber}>`\n    } else if (this._remoteNumber) {\n      return this._remoteNumber\n    } else {\n      return this._remoteUri\n    }\n  }\n\n  /**\n   * Invite session state.\n   *\n   * PJSIP_INV_STATE_NULL           Before INVITE is sent or received\n   * PJSIP_INV_STATE_CALLING        After INVITE is sent\n   * PJSIP_INV_STATE_INCOMING       After INVITE is received.\n   * PJSIP_INV_STATE_EARLY          After response with To tag.\n   * PJSIP_INV_STATE_CONNECTING     After 2xx is sent/received.\n   * PJSIP_INV_STATE_CONFIRMED      After ACK is sent/received.\n   * PJSIP_INV_STATE_DISCONNECTED   Session is terminated.\n   *\n   * @returns {String}\n   */\n  getState (): PJSIPInviteState {\n    return this._state\n  }\n\n  /**\n   * Text describing the state.\n   *\n   * @returns {String}\n   */\n  getStateText (): string {\n    return this._stateText\n  }\n\n  isHeld (): boolean {\n    return this._held\n  }\n\n  isMuted (): boolean {\n    return this._muted\n  }\n\n  isSpeaker (): boolean {\n    return this._speaker\n  }\n\n  isTerminated (): boolean {\n    return this._state === 'PJSIP_INV_STATE_DISCONNECTED'\n  }\n\n  /**\n   * Flag if remote was SDP offerer\n   * @returns {boolean}\n   */\n  getRemoteOfferer (): number {\n    // TODO Verify whether boolean value\n    return this._remoteOfferer\n  }\n\n  /**\n   * Number of audio streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteAudioCount (): number {\n    return this._remoteAudioCount\n  }\n\n  /**\n   * Number of video streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteVideoCount (): number {\n    return this._remoteVideoCount\n  }\n\n  /**\n   * Number of simultaneous active audio streams for this call. If zero - audio is disabled in this call.\n   * @returns {int}\n   */\n  getAudioCount (): number {\n    return this._audioCount\n  }\n\n  /**\n   * Number of simultaneous active video streams for this call. If zero - video is disabled in this call.\n   * @returns {*}\n   */\n  getVideoCount (): number {\n    return this._videoCount\n  }\n\n  /**\n   * Last status code heard, which can be used as cause code.\n   * Possible values:\n   * - PJSIP_SC_TRYING / 100\n   * - PJSIP_SC_RINGING / 180\n   * - PJSIP_SC_CALL_BEING_FORWARDED / 181\n   * - PJSIP_SC_QUEUED / 182\n   * - PJSIP_SC_PROGRESS / 183\n   * - PJSIP_SC_OK / 200\n   * - PJSIP_SC_ACCEPTED / 202\n   * - PJSIP_SC_MULTIPLE_CHOICES / 300\n   * - PJSIP_SC_MOVED_PERMANENTLY / 301\n   * - PJSIP_SC_MOVED_TEMPORARILY / 302\n   * - PJSIP_SC_USE_PROXY / 305\n   * - PJSIP_SC_ALTERNATIVE_SERVICE / 380\n   * - PJSIP_SC_BAD_REQUEST / 400\n   * - PJSIP_SC_UNAUTHORIZED / 401\n   * - PJSIP_SC_PAYMENT_REQUIRED / 402\n   * - PJSIP_SC_FORBIDDEN / 403\n   * - PJSIP_SC_NOT_FOUND / 404\n   * - PJSIP_SC_METHOD_NOT_ALLOWED / 405\n   * - PJSIP_SC_NOT_ACCEPTABLE / 406\n   * - PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED / 407\n   * - PJSIP_SC_REQUEST_TIMEOUT / 408\n   * - PJSIP_SC_GONE / 410\n   * - PJSIP_SC_REQUEST_ENTITY_TOO_LARGE / 413\n   * - PJSIP_SC_REQUEST_URI_TOO_LONG / 414\n   * - PJSIP_SC_UNSUPPORTED_MEDIA_TYPE / 415\n   * - PJSIP_SC_UNSUPPORTED_URI_SCHEME / 416\n   * - PJSIP_SC_BAD_EXTENSION / 420\n   * - PJSIP_SC_EXTENSION_REQUIRED / 421\n   * - PJSIP_SC_SESSION_TIMER_TOO_SMALL / 422\n   * - PJSIP_SC_INTERVAL_TOO_BRIEF / 423\n   * - PJSIP_SC_TEMPORARILY_UNAVAILABLE / 480\n   * - PJSIP_SC_CALL_TSX_DOES_NOT_EXIST / 481\n   * - PJSIP_SC_LOOP_DETECTED / 482\n   * - PJSIP_SC_TOO_MANY_HOPS / 483\n   * - PJSIP_SC_ADDRESS_INCOMPLETE / 484\n   * - PJSIP_AC_AMBIGUOUS / 485\n   * - PJSIP_SC_BUSY_HERE / 486\n   * - PJSIP_SC_REQUEST_TERMINATED / 487\n   * - PJSIP_SC_NOT_ACCEPTABLE_HERE / 488\n   * - PJSIP_SC_BAD_EVENT / 489\n   * - PJSIP_SC_REQUEST_UPDATED / 490\n   * - PJSIP_SC_REQUEST_PENDING / 491\n   * - PJSIP_SC_UNDECIPHERABLE / 493\n   * - PJSIP_SC_INTERNAL_SERVER_ERROR / 500\n   * - PJSIP_SC_NOT_IMPLEMENTED / 501\n   * - PJSIP_SC_BAD_GATEWAY / 502\n   * - PJSIP_SC_SERVICE_UNAVAILABLE / 503\n   * - PJSIP_SC_SERVER_TIMEOUT / 504\n   * - PJSIP_SC_VERSION_NOT_SUPPORTED / 505\n   * - PJSIP_SC_MESSAGE_TOO_LARGE / 513\n   * - PJSIP_SC_PRECONDITION_FAILURE / 580\n   * - PJSIP_SC_BUSY_EVERYWHERE / 600\n   * - PJSIP_SC_DECLINE / 603\n   * - PJSIP_SC_DOES_NOT_EXIST_ANYWHERE / 604\n   * - PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE / 606\n   * - PJSIP_SC_TSX_TIMEOUT / PJSIP_SC_REQUEST_TIMEOUT\n   * - PJSIP_SC_TSX_TRANSPORT_ERROR / PJSIP_SC_SERVICE_UNAVAILABLE\n   *\n   * @returns {string}\n   */\n  getLastStatusCode (): string {\n    return this._lastStatusCode\n  }\n\n  /**\n   * The reason phrase describing the last status.\n   *\n   * @returns {string}\n   */\n  getLastReason (): string {\n    return this._lastReason\n  }\n\n  getMedia (): string {\n    return this._media\n  }\n\n  getProvisionalMedia (): string {\n    return this._provisionalMedia\n  }\n\n  /**\n   * Format seconds to \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  _formatTime (seconds: number): string {\n    if (isNaN(seconds) || seconds < 0) {\n      return '00:00'\n    }\n    const hours = parseInt(String(seconds / 3600)) % 24\n    const minutes = parseInt(String(seconds / 60)) % 60\n    let result = ''\n    seconds = seconds % 60\n\n    if (hours > 0) {\n      result += (hours < 10 ? '0' + hours : hours) + ':'\n    }\n\n    result += (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds)\n    return result\n  }\n}\n\nexport { Call }\n\nexport default Call\n"],"file":"Call.js"}