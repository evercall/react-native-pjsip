{"version":3,"sources":["../src/Call.ts"],"names":["PJSUAVideoReqKeyframeMethod","PJSUACallFlags","PJSIPCallLastStatusCode","PJSIPInviteState","Call","constructor","props","id","callId","accountId","localContact","localUri","remoteContact","remoteUri","state","stateText","held","muted","speaker","connectDuration","totalDuration","remoteOfferer","remoteAudioCount","remoteVideoCount","audioCount","videoCount","lastStatusCode","lastReason","media","provisionalMedia","constructionTime","Math","round","Date","getTime","getTotalDuration","time","offset","getConnectDuration","PJSIPInvStateDisconnected","getFormattedTotalDuration","formatTime","getFormattedConnectDuration","getRemoteName","remoteName","match","getRemoteNumber","remoteNumber","getRemoteFormattedNumber","isTerminated","seconds","toISOString","substr"],"mappings":"AAAA;AACA;AACA;AACA;AACA,WAAYA,2BAAZ;AAYA;AACA;AACA;;WAdYA,2B;AAAAA,EAAAA,2B;AAAAA,EAAAA,2B;GAAAA,2B,KAAAA,2B;;AAeZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AA0DZ,WAAYC,uBAAZ;AA0DA;AACA;AACA;;WA5DYA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;AAAAA,EAAAA,uB;GAAAA,uB,KAAAA,uB;;AA6DZ,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAyDZ;AACA;AACA;AACA,MAAMC,IAAN,CAA+B;AAC7B;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAIE;AACF;AACA;;AAEE;AACF;AACA;;AAKE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AAMEC,EAAAA,WAAW,CAAEC,KAAF,EAAmB;AAC5B,SAAKC,EAAL,GAAUD,KAAK,CAACC,EAAhB;AACA,SAAKC,MAAL,GAAcF,KAAK,CAACE,MAApB;AACA,SAAKC,SAAL,GAAiBH,KAAK,CAACG,SAAvB;AACA,SAAKC,YAAL,GAAoBJ,KAAK,CAACI,YAA1B;AACA,SAAKC,QAAL,GAAgBL,KAAK,CAACK,QAAtB;AACA,SAAKC,aAAL,GAAqBN,KAAK,CAACM,aAA3B;AACA,SAAKC,SAAL,GAAiBP,KAAK,CAACO,SAAvB;AACA,SAAKC,KAAL,GAAaR,KAAK,CAACQ,KAAnB;AACA,SAAKC,SAAL,GAAiBT,KAAK,CAACS,SAAvB;AACA,SAAKC,IAAL,GAAYV,KAAK,CAACU,IAAlB;AACA,SAAKC,KAAL,GAAaX,KAAK,CAACW,KAAnB;AACA,SAAKC,OAAL,GAAeZ,KAAK,CAACY,OAArB;AACA,SAAKC,eAAL,GAAuBb,KAAK,CAACa,eAA7B;AACA,SAAKC,aAAL,GAAqBd,KAAK,CAACc,aAA3B;AACA,SAAKC,aAAL,GAAqBf,KAAK,CAACe,aAA3B;AACA,SAAKC,gBAAL,GAAwBhB,KAAK,CAACgB,gBAA9B;AACA,SAAKC,gBAAL,GAAwBjB,KAAK,CAACiB,gBAA9B;AACA,SAAKC,UAAL,GAAkBlB,KAAK,CAACkB,UAAxB;AACA,SAAKC,UAAL,GAAkBnB,KAAK,CAACmB,UAAxB;AACA,SAAKC,cAAL,GAAsBpB,KAAK,CAACoB,cAA5B;AACA,SAAKC,UAAL,GAAkBrB,KAAK,CAACqB,UAAxB;AAEA,SAAKC,KAAL,GAAatB,KAAK,CAACsB,KAAnB;AACA,SAAKC,gBAAL,GAAwBvB,KAAK,CAACuB,gBAA9B;AAEA,SAAKC,gBAAL,GAAwBC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAAxB;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,gBAAgB,GAAY;AAC1B,QAAIC,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAAX;AACA,QAAIG,MAAM,GAAGD,IAAI,GAAG,KAAKN,gBAAzB;AAEA,WAAO,KAAKV,aAAL,GAAqBiB,MAA5B;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,kBAAkB,GAAY;AAC5B,QAAI,KAAKnB,eAAL,GAAuB,CAAvB,IAA4B,KAAKL,KAAL,IAAcX,gBAAgB,CAACoC,yBAA/D,EAA0F;AACxF,aAAO,KAAKpB,eAAZ;AACD;;AAED,QAAIiB,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAAX;AACA,QAAIG,MAAM,GAAGD,IAAI,GAAG,KAAKN,gBAAzB;AAEA,WAAO,KAAKX,eAAL,GAAuBkB,MAA9B;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,yBAAyB,GAAY;AACnC,WAAO,KAAKC,UAAL,CAAgB,KAAKN,gBAAL,EAAhB,CAAP;AACD;AAED;AACF;AACA;;;AACEO,EAAAA,2BAA2B,GAAY;AACrC,WAAO,KAAKD,UAAL,CAAgB,KAAKH,kBAAL,EAAhB,CAAP;AACD;AAED;AACF;AACA;;;AACEK,EAAAA,aAAa,GAAY;AACvB,QAAIC,UAAU,GAAG,IAAjB;;AAEA,QAAI,KAAK/B,SAAT,EAAoB;AAClB,UAAIgC,KAAK,GAAG,KAAKhC,SAAL,CAAegC,KAAf,CAAqB,yBAArB,CAAZ;;AAEA,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AACF;;AAED,WAAOD,UAAP;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,eAAe,GAAY;AACzB,QAAIC,YAAY,GAAG,IAAnB;;AAEA,QAAI,KAAKlC,SAAT,EAAoB;AAClB,UAAIgC,KAAK,GAAG,KAAKhC,SAAL,CAAegC,KAAf,CAAqB,yBAArB,CAAZ;;AAEA,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAK,CAAC,CAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,KAAK,GAAG,KAAKhC,SAAL,CAAegC,KAAf,CAAqB,cAArB,CAAR;;AAEA,YAAIA,KAAJ,EAAW;AACT,iBAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AACF;AACF;;AACD,WAAOE,YAAP;AACD;;AAEDC,EAAAA,wBAAwB,GAAY;AAClC,QAAI,KAAKL,aAAL,MAAwB,KAAKG,eAAL,EAA5B,EAAoD;AAClD,aAAQ,GAAE,KAAKH,aAAL,EAAqB,KAAI,KAAKG,eAAL,EAAuB,GAA1D;AACD,KAFD,MAEO,IAAI,KAAKA,eAAL,EAAJ,EAA4B;AACjC,aAAO,KAAKA,eAAL,EAAP;AACD,KAFM,MAEA;AACL,aAAO,KAAKjC,SAAZ;AACD;AACF;;AAEDoC,EAAAA,YAAY,GAAa;AACvB,WAAO,KAAKnC,KAAL,KAAeX,gBAAgB,CAACoC,yBAAvC;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,UAAU,CAAES,OAAF,EAA2B;AACnC,WAAO,IAAIjB,IAAJ,CAASiB,OAAO,GAAG,IAAnB,EAAyBC,WAAzB,GAAuCC,MAAvC,CAA8C,EAA9C,EAAkD,CAAlD,CAAP;AACD;;AA7M4B;;AAgN/B,SAAShD,IAAT;AAEA,eAAeA,IAAf","sourcesContent":["/**\n * Enumeration of video keyframe request methods. Keyframe request is triggered by decoder, usually when the incoming\n * video stream cannot be decoded properly due to missing video keyframe.\n */\nexport enum PJSUAVideoReqKeyframeMethod {\n  /**\n   * Requesting keyframe via SIP INFO message. Note that incoming keyframe request via SIP INFO will always be handled\n   * even if this flag is unset.\n   */\n  PJSUAVIDREQKEYFRAMESIPINFO = 'PJSUAVIDREQKEYFRAMESIPINFO',\n  /**\n   * Requesting keyframe via Picture Loss Indication of RTCP feedback. This is currently not supported.\n   */\n  PJSUAVIDREQKEYFRAMERTCPPLI = 'PJSUAVIDREQKEYFRAMERTCPPLI'\n}\n\n/**\n * Flags to be given to various call APIs. More than one flags may be specified by bitmasking them.\n */\nexport enum PJSUACallFlags {\n  /**\n   * When the call is being put on hold, specify this flag to unhold it. This flag is only valid for\n   * pjsuacallreinvite() and pjsuacallupdate(). Note: for compatibility reason, this flag must have value of 1\n   * because previously the unhold option is specified as boolean value.\n   */\n  PJSUACALLUNHOLD = 'PJSUACALLUNHOLD',\n\n  /**\n   * Update the local invite session's contact with the contact URI from the account. This flag is only valid for\n   * pjsuacallsethold2(), pjsuacallreinvite() and pjsuacallupdate(). This flag is useful in IP address change\n   * situation, after the local account's Contact has been updated (typically with re-registration) use this flag to\n   * update the invite session with the new Contact and to inform this new Contact to the remote peer with the outgoing\n   * re-INVITE or UPDATE.\n   */\n  PJSUACALLUPDATECONTACT = 'PJSUACALLUPDATECONTACT',\n\n  /**\n   * Include SDP \"m=\" line with port set to zero for each disabled media (i.e when audcnt or vidcnt is set to zero).\n   * This flag is only valid for pjsuacallmakecall(), pjsuacallreinvite(), and pjsuacallupdate().\n   * Note that even this flag is applicable in pjsuacallreinvite() and pjsuacallupdate(), it will only take\n   * effect when the re-INVITE/UPDATE operation regenerates SDP offer, such as changing audio or video count in\n   * the call setting.\n   */\n  PJSUACALLINCLUDEDISABLEDMEDIA = 'PJSUACALLINCLUDEDISABLEDMEDIA',\n  /**\n   * Do not send SDP when sending INVITE or UPDATE. This flag is only valid for pjsuacallmakecall(),\n   * pjsuacallreinvite()/reinvite2(), or pjsuacallupdate()/update2(). For re-invite/update, specifying\n   * PJSUACALLUNHOLD will take precedence over this flag.\n   */\n  PJSUACALLNOSDPOFFER = 'PJSUACALLNOSDPOFFER',\n\n  /**\n   * Deinitialize and recreate media, including media transport. This flag is useful in IP address change situation,\n   * if the media transport address (or address family) changes, for example during IPv4/IPv6 network handover.\n   * This flag is only valid for pjsuacallreinvite()/reinvite2(), or pjsuacallupdate()/update2().\n   *\n   * Warning: If the re-INVITE/UPDATE fails, the old media will not be reverted.\n   */\n  PJSUACALLREINITMEDIA = 'PJSUACALLREINITMEDIA',\n\n  /**\n   * Update the local invite session's Via with the via address from the account. This flag is only valid for\n   * pjsuacallsethold2(), pjsuacallreinvite() and pjsuacallupdate(). Similar to the flag\n   * PJSUACALLUPDATECONTACT above, this flag is useful in IP address change situation, after the local account's\n   * Via has been updated (typically with re-registration).\n   */\n  PJSUACALLUPDATEVIA = 'PJSUACALLUPDATEVIA',\n\n  /**\n   * Update dialog target to URI specified in pjsuamsgdata.targeturi. This flag is only valid for\n   * pjsuacallsethold(), pjsuacallreinvite(), and pjsuacallupdate(). This flag can be useful in IP address change\n   * scenario where IP version has been changed and application needs to update target IP address.\n   */\n  PJSUACALLUPDATETARGET = 'PJSUACALLUPDATETARGET'\n\n}\n\nexport enum PJSIPCallLastStatusCode {\n  PJSIP_SC_TRYING = 'PJSIP_SC_TRYING',\n  PJSIP_SC_RINGING = 'PJSIP_SC_RINGING',\n  PJSIP_SC_CALL_BEING_FORWARDED = 'PJSIP_SC_CALL_BEING_FORWARDED',\n  PJSIP_SC_QUEUED = 'PJSIP_SC_QUEUED',\n  PJSIP_SC_PROGRESS = 'PJSIP_SC_PROGRESS',\n  PJSIP_SC_OK = 'PJSIP_SC_OK',\n  PJSIP_SC_ACCEPTED = 'PJSIP_SC_ACCEPTED',\n  PJSIP_SC_MULTIPLE_CHOICES = 'PJSIP_SC_MULTIPLE_CHOICES',\n  PJSIP_SC_MOVED_PERMANENTLY = 'PJSIP_SC_MOVED_PERMANENTLY',\n  PJSIP_SC_MOVED_TEMPORARILY = 'PJSIP_SC_MOVED_TEMPORARILY',\n  PJSIP_SC_USE_PROXY = 'PJSIP_SC_USE_PROXY',\n  PJSIP_SC_ALTERNATIVE_SERVICE = 'PJSIP_SC_ALTERNATIVE_SERVICE',\n  PJSIP_SC_BAD_REQUEST = 'PJSIP_SC_BAD_REQUEST',\n  PJSIP_SC_UNAUTHORIZED = 'PJSIP_SC_UNAUTHORIZED',\n  PJSIP_SC_PAYMENT_REQUIRED = 'PJSIP_SC_PAYMENT_REQUIRED',\n  PJSIP_SC_FORBIDDEN = 'PJSIP_SC_FORBIDDEN',\n  PJSIP_SC_NOT_FOUND = 'PJSIP_SC_NOT_FOUND',\n  PJSIP_SC_METHOD_NOT_ALLOWED = 'PJSIP_SC_METHOD_NOT_ALLOWED',\n  PJSIP_SC_NOT_ACCEPTABLE = 'PJSIP_SC_NOT_ACCEPTABLE',\n  PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED = 'PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED',\n  PJSIP_SC_REQUEST_TIMEOUT = 'PJSIP_SC_REQUEST_TIMEOUT',\n  PJSIP_SC_GONE = 'PJSIP_SC_GONE',\n  PJSIP_SC_REQUEST_ENTITY_TOO_LARGE = 'PJSIP_SC_REQUEST_ENTITY_TOO_LARGE',\n  PJSIP_SC_REQUEST_URI_TOO_LONG = 'PJSIP_SC_REQUEST_URI_TOO_LONG',\n  PJSIP_SC_UNSUPPORTED_MEDIA_TYPE = 'PJSIP_SC_UNSUPPORTED_MEDIA_TYPE',\n  PJSIP_SC_UNSUPPORTED_URI_SCHEME = 'PJSIP_SC_UNSUPPORTED_URI_SCHEME',\n  PJSIP_SC_BAD_EXTENSION = 'PJSIP_SC_BAD_EXTENSION',\n  PJSIP_SC_EXTENSION_REQUIRED = 'PJSIP_SC_EXTENSION_REQUIRED',\n  PJSIP_SC_SESSION_TIMER_TOO_SMALL = 'PJSIP_SC_SESSION_TIMER_TOO_SMALL',\n  PJSIP_SC_INTERVAL_TOO_BRIEF = 'PJSIP_SC_INTERVAL_TOO_BRIEF',\n  PJSIP_SC_TEMPORARILY_UNAVAILABLE = 'PJSIP_SC_TEMPORARILY_UNAVAILABLE',\n  PJSIP_SC_CALL_TSX_DOES_NOT_EXIST = 'PJSIP_SC_CALL_TSX_DOES_NOT_EXIST',\n  PJSIP_SC_LOOP_DETECTED = 'PJSIP_SC_LOOP_DETECTED',\n  PJSIP_SC_TOO_MANY_HOPS = 'PJSIP_SC_TOO_MANY_HOPS',\n  PJSIP_SC_ADDRESS_INCOMPLETE = 'PJSIP_SC_ADDRESS_INCOMPLETE',\n  PJSIP_AC_AMBIGUOUS = 'PJSIP_AC_AMBIGUOUS',\n  PJSIP_SC_BUSY_HERE = 'PJSIP_SC_BUSY_HERE',\n  PJSIP_SC_REQUEST_TERMINATED = 'PJSIP_SC_REQUEST_TERMINATED',\n  PJSIP_SC_NOT_ACCEPTABLE_HERE = 'PJSIP_SC_NOT_ACCEPTABLE_HERE',\n  PJSIP_SC_BAD_EVENT = 'PJSIP_SC_BAD_EVENT',\n  PJSIP_SC_REQUEST_UPDATED = 'PJSIP_SC_REQUEST_UPDATED',\n  PJSIP_SC_REQUEST_PENDING = 'PJSIP_SC_REQUEST_PENDING',\n  PJSIP_SC_UNDECIPHERABLE = 'PJSIP_SC_UNDECIPHERABLE',\n  PJSIP_SC_INTERNAL_SERVER_ERROR = 'PJSIP_SC_INTERNAL_SERVER_ERROR',\n  PJSIP_SC_NOT_IMPLEMENTED = 'PJSIP_SC_NOT_IMPLEMENTED',\n  PJSIP_SC_BAD_GATEWAY = 'PJSIP_SC_BAD_GATEWAY',\n  PJSIP_SC_SERVICE_UNAVAILABLE = 'PJSIP_SC_SERVICE_UNAVAILABLE',\n  PJSIP_SC_SERVER_TIMEOUT = 'PJSIP_SC_SERVER_TIMEOUT',\n  PJSIP_SC_VERSION_NOT_SUPPORTED = 'PJSIP_SC_VERSION_NOT_SUPPORTED',\n  PJSIP_SC_MESSAGE_TOO_LARGE = 'PJSIP_SC_MESSAGE_TOO_LARGE',\n  PJSIP_SC_PRECONDITION_FAILURE = 'PJSIP_SC_PRECONDITION_FAILURE',\n  PJSIP_SC_BUSY_EVERYWHERE = 'PJSIP_SC_BUSY_EVERYWHERE',\n  PJSIP_SC_DECLINE = 'PJSIP_SC_DECLINE',\n  PJSIP_SC_DOES_NOT_EXIST_ANYWHERE = 'PJSIP_SC_DOES_NOT_EXIST_ANYWHERE',\n  PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE = 'PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE'\n}\n\n/**\n * This enumeration describes invite session state\n */\nexport enum PJSIPInviteState {\n  /** Before INVITE is sent or received */\n  PJSIPInvStateNull = 'PJSIP_INV_STATE_NULL',\n  /** After INVITE is sent */\n  PJSIPInvStateCalling = 'PJSIP_INV_STATE_CALLING',\n  /** After INVITE is received */\n  PJSIPInvStateIncoming = 'PJSIP_INV_STATE_INCOMING',\n  /** After response with To tag */\n  PJSIPInvStateEarly = 'PJSIP_INV_STATE_EARLY',\n  /** After 2xx is sent/received */\n  PJSIPInvStateConnecting = 'PJSIP_INV_STATE_CONNECTING',\n  /** After ACK is sent/received */\n  PJSIPInvStateConfirmed = 'PJSIP_INV_STATE_CONFIRMED',\n  /** Session is terminated */\n  PJSIPInvStateDisconnected = 'PJSIP_INV_STATE_DISCONNECTED',\n}\n\ninterface mediaInterface {\n  dir: string,\n  type: string,\n  status: string,\n  audioStream: {\n    confSlot: number\n  },\n  videoStream: {\n    captureDevice: number,\n    windowId: number\n  }\n}\n\nexport interface CallData {\n  id: number,\n  callId: string,\n  accountId: number,\n  localContact: string,\n  localUri: string,\n  remoteContact: string,\n  remoteUri: string,\n  state: PJSIPInviteState,\n  stateText: string,\n  connectDuration: number,\n  totalDuration: number,\n  lastStatusCode: PJSIPCallLastStatusCode | null,\n  lastReason: string,\n  held: boolean,\n  muted: boolean,\n  speaker: boolean,\n  remoteOfferer: number,\n  remoteAudioCount: number,\n  remoteVideoCount: number,\n  audioCount: number,\n  videoCount: number,\n  media: mediaInterface[],\n  provisionalMedia: mediaInterface[],\n  constructionTime?: number\n}\n\n/**\n * This class describes the information and current status of a call.\n */\nclass Call implements CallData {\n  /**\n   * Call identification.\n   */\n  id: number\n  /**\n   * The account ID where this call belongs.\n   */\n  callId: string\n  /**\n   * Dialog Call-ID string.\n   */\n  accountId: number\n  /**\n   * Local Contact.\n   * TODO: Provide example\n   */\n  localContact: string\n  /**\n   * Local URI.\n   * TODO: Provide example\n   */\n  localUri: string\n  /**\n   * Remote contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  remoteContact: string\n  /**\n   * Remote URI.\n   * TODO: Provide example\n   */\n  remoteUri: string\n  /**\n   * Invite session state.\n   */\n  state: PJSIPInviteState\n  /**\n   * Text describing the state.\n   */\n  stateText: string\n  connectDuration: number\n  totalDuration: number\n  /**\n   * Last status code heard, which can be used as cause code\n   */\n  lastStatusCode: PJSIPCallLastStatusCode | null\n  /**\n   * The reason phrase describing the last status.\n   */\n  lastReason: string\n  held: boolean\n  muted: boolean\n  speaker: boolean\n  /**\n   * Flag if remote was SDP offerer\n   */\n  remoteOfferer: number\n  /**\n   * Number of audio streams offered by remote.\n   */\n  remoteAudioCount: number\n  /**\n   * Number of video streams offered by remote.\n   */\n  remoteVideoCount: number\n  /**\n   * Number of simultaneous active audio streams for this call. If zero - audio is disabled in this call.\n   */\n  audioCount: number\n  /**\n   * Number of simultaneous active video streams for this call. If zero - video is disabled in this call.\n   */\n  videoCount: number\n  media: mediaInterface[]\n  provisionalMedia: mediaInterface[]\n  constructionTime: number\n\n  constructor (props: CallData) {\n    this.id = props.id\n    this.callId = props.callId\n    this.accountId = props.accountId\n    this.localContact = props.localContact\n    this.localUri = props.localUri\n    this.remoteContact = props.remoteContact\n    this.remoteUri = props.remoteUri\n    this.state = props.state\n    this.stateText = props.stateText\n    this.held = props.held\n    this.muted = props.muted\n    this.speaker = props.speaker\n    this.connectDuration = props.connectDuration\n    this.totalDuration = props.totalDuration\n    this.remoteOfferer = props.remoteOfferer\n    this.remoteAudioCount = props.remoteAudioCount\n    this.remoteVideoCount = props.remoteVideoCount\n    this.audioCount = props.audioCount\n    this.videoCount = props.videoCount\n    this.lastStatusCode = props.lastStatusCode\n    this.lastReason = props.lastReason\n\n    this.media = props.media\n    this.provisionalMedia = props.provisionalMedia\n\n    this.constructionTime = Math.round(new Date().getTime() / 1000)\n  }\n\n  /**\n   * Up-to-date call duration in seconds.\n   * Use local time to calculate actual call duration.\n   */\n  getTotalDuration (): number {\n    let time = Math.round(new Date().getTime() / 1000)\n    let offset = time - this.constructionTime\n\n    return this.totalDuration + offset\n  }\n\n  /**\n   * Up-to-date call connected duration (zero when call is not established)\n   */\n  getConnectDuration (): number {\n    if (this.connectDuration < 0 || this.state == PJSIPInviteState.PJSIPInvStateDisconnected) {\n      return this.connectDuration\n    }\n\n    let time = Math.round(new Date().getTime() / 1000)\n    let offset = time - this.constructionTime\n\n    return this.connectDuration + offset\n  }\n\n  /**\n   * Call duration in \"HH:MM:SS\" format.\n   */\n  getFormattedTotalDuration (): string {\n    return this.formatTime(this.getTotalDuration())\n  }\n\n  /**\n   * Call duration in \"HH:MM:SS\" format.\n   */\n  getFormattedConnectDuration (): string {\n    return this.formatTime(this.getConnectDuration())\n  }\n\n  /**\n   * Callee name. Could be null if no name specified in URI.\n   */\n  getRemoteName (): string {\n    let remoteName = null\n\n    if (this.remoteUri) {\n      let match = this.remoteUri.match(/\"([^\"]+)\" <sip:([^@]+)@/)\n\n      if (match) {\n        return match[1]\n      }\n    }\n\n    return remoteName\n  }\n\n  /**\n   * Callee number\n   */\n  getRemoteNumber (): string {\n    let remoteNumber = null\n\n    if (this.remoteUri) {\n      let match = this.remoteUri.match(/\"([^\"]+)\" <sip:([^@]+)@/)\n\n      if (match) {\n        return match[2]\n      } else {\n        match = this.remoteUri.match(/sip:([^@]+)@/)\n\n        if (match) {\n          return match[1]\n        }\n      }\n    }\n    return remoteNumber\n  }\n\n  getRemoteFormattedNumber (): string {\n    if (this.getRemoteName() && this.getRemoteNumber()) {\n      return `${this.getRemoteName()} <${this.getRemoteNumber()}>`\n    } else if (this.getRemoteNumber()) {\n      return this.getRemoteNumber()\n    } else {\n      return this.remoteUri\n    }\n  }\n\n  isTerminated (): boolean {\n    return this.state === PJSIPInviteState.PJSIPInvStateDisconnected\n  }\n\n  /**\n   * Format seconds to \"HH:MM:SS\" format.\n   */\n  formatTime (seconds: number): string {\n    return new Date(seconds * 1000).toISOString().substr(11, 8)\n  }\n}\n\nexport { Call }\n\nexport default Call\n"],"file":"Call.js"}