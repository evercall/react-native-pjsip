{"version":3,"sources":["../src/Endpoint.ts"],"names":["DeviceEventEmitter","EventEmitter","PjSipModule","Call","Message","Account","Orientation","Endpoint","constructor","addListener","_onRegistrationChanged","bind","_onCallReceived","_onCallChanged","_onCallTerminated","_onCallScreenLocked","_onMessageReceived","_onConnectivityChanged","start","configuration","Promise","resolve","reject","successful","data","accounts","calls","d","push","e","extra","key","Object","prototype","hasOwnProperty","call","stop","updateStunServers","accountId","stunServerList","createAccount","registerAccount","account","renew","getId","reason","Error","deleteAccount","getAccounts","getAccount","accountData","getCalls","getCall","callId","callData","makeCall","destination","callSettings","msgData","_normalize","answerCall","hangupCall","declineCall","holdCall","unholdCall","muteCall","unMuteCall","useSpeaker","useEarpiece","xferCall","xferReplacesCall","destCall","redirectCall","dtmfCall","digits","activateAudioSession","deactivateAudioSession","changeOrientation","orientation","changeCodecSettings","codecSettings","emit","lock","available","startsWith","realm","getProxy","getDomain"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter } from 'react-native'\nimport { EventEmitter } from 'events'\nimport PjSipModule from './PjSipModule'\nimport Call, { CallData, PJSUACallFlags, PJSUAVideoReqKeyframeMethod } from './Call'\nimport Message, { MessageData } from './Message'\nimport Account, { AccountConfiguration } from './Account'\n\n/**\n * @example { 'speex/8000': 1 }\n */\nexport type Codec = {\n  /**\n   * @example speex/8000\n   */\n  [key: string]: number\n}\n\nexport enum Orientation {\n  PJMEDIA_ORIENT_NATURAL = 'PJMEDIA_ORIENT_NATURAL',\n  PJMEDIA_ORIENT_ROTATE_90DEG = 'PJMEDIA_ORIENT_ROTATE_90DEG',\n  PJMEDIA_ORIENT_ROTATE_270DEG = 'PJMEDIA_ORIENT_ROTATE_270DEG',\n  PJMEDIA_ORIENT_ROTATE_180DEG = 'PJMEDIA_ORIENT_ROTATE_180DEG'\n}\n\n/**\n * Not really documented.\n */\nexport interface StartConfiguration {\n  service: {\n    /** List of stun servers */\n    stun: string[]\n  }\n}\n\nexport interface PJSIPMessageData {\n  /**\n   * This structure describes additional information to be sent with\n   * outgoing SIP message. It can (optionally) be specified for example\n   * with #pjsua_call_make_call(), #pjsua_call_answer(), #pjsua_call_hangup(),\n   * #pjsua_call_set_hold(), #pjsua_call_send_im(), and many more.\n   *\n   * Application MUST call #pjsua_msg_data_init() to initialize this\n   * structure before setting its values.\n   */\n  targetURI?: string,\n  /**\n   * Additional message headers as linked list. Application can add\n   * headers to the list by creating the header, either from the heap/pool\n   * or from temporary local variable, and add the header using\n   * linked list operation. See pjsua_app.c for some sample codes.\n   */\n  headers?: Object[],\n\n  /**\n   * MIME type of optional message body.\n   */\n  contentType?: string,\n\n  /**\n   * Optional message body to be added to the message, only when the\n   * message doesn't have a body.\n   */\n  body?: string\n}\n\nexport interface PJSIPCallSettings {\n  /**\n   * Number of simultaneous active audio streams for this call. Setting\n   * this to zero will disable audio in this call.\n   *\n   * @default 1\n   */\n  audioCount?: number,\n\n  /**\n   * Number of simultaneous active video streams for this call. Setting\n   * this to zero will disable video in this call.\n   *\n   * @default 1 (if video feature is enabled, otherwise it is zero)\n   */\n  videoCount?: number,\n\n  /**\n   * Bitmask of #pjsua_call_flag constants.\n   *\n   * @default PJSUA_CALL_INCLUDE_DISABLED_MEDIA\n   */\n  flag?: PJSUACallFlags,\n\n  /**\n   * This flag controls what methods to request keyframe are allowed on\n   * the call. Value is bitmask of #pjsua_vid_req_keyframe_method.\n   *\n   * @default PJSUA_VID_REQ_KEYFRAME_SIP_INFO\n   */\n  requestKeyframeMethod?: PJSUAVideoReqKeyframeMethod\n}\n\nexport default class Endpoint extends EventEmitter {\n  constructor () {\n    super()\n\n    // Subscribe to Accounts events\n    DeviceEventEmitter.addListener('pjSipRegistrationChanged', this._onRegistrationChanged.bind(this))\n\n    // Subscribe to Calls events\n    DeviceEventEmitter.addListener('pjSipCallReceived', this._onCallReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallChanged', this._onCallChanged.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallTerminated', this._onCallTerminated.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallScreenLocked', this._onCallScreenLocked.bind(this))\n    DeviceEventEmitter.addListener('pjSipMessageReceived', this._onMessageReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipConnectivityChanged', this._onConnectivityChanged.bind(this))\n  }\n\n  /**\n   * Returns a Promise that will be resolved once PjSip module is initialized.\n   * Do not call any function while library is not initialized.\n   *\n   * @returns {Promise}\n   */\n  start (configuration: StartConfiguration): Promise<{\n    accounts: Account[],\n    calls: Call[],\n  }> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.start(configuration, (successful, data) => {\n        if (successful) {\n          const accounts: Account[] = []\n          const calls: Call[] = []\n\n          for (const d of data.accounts) {\n            accounts.push(new Account(d))\n          }\n\n          for (const e of data.calls) {\n            calls.push(new Call(e))\n          }\n\n          const extra = {}\n\n          for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key) && key != 'accounts' && key != 'calls') {\n              extra[key] = data[key]\n            }\n          }\n\n          resolve({\n            accounts,\n            calls,\n            ...extra,\n          })\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  stop (): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.stop(() => {})\n      resolve()\n    })\n  }\n\n  updateStunServers (accountId: number, stunServerList: string[]): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.updateStunServers(accountId, stunServerList, () => {})\n      resolve()\n    })\n  }\n\n  /**\n   * Add a new account. If registration is configured for this account, this function would also start the\n   * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n   * internally by the library, and application doesn't need to do anything to maintain the registration session.\n   *\n   * An example configuration:\n   * {\n   *   name: \"John Doe\",\n   *   username: \"100\",\n   *   domain: \"pbx.com\",\n   *   password: \"XXXXXX\",\n   *\n   *   proxy: \"192.168.100.1:5060\", // default disabled.\n   *   transport: \"TCP\", // default TCP\n   *   regServer: \"pbx.com\", // default taken from domain\n   *   regTimeout: 300, // default 300\n   * }\n   *\n   * @param {Object} configuration\n   * @returns {Promise}\n   */\n  createAccount (configuration: AccountConfiguration): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.createAccount(configuration, (successful, data) => {\n        if (successful) {\n          resolve(new Account(<AccountConfiguration>data))\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Update registration or perform unregistration.\n   * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n   * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n   *\n   * @param {Account} account\n   * @param renew renew If renew argument is zero, this will start unregistration process.\n   * @returns {Promise}\n   */\n  registerAccount (account: Account, renew = true): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.registerAccount(account.getId(), renew, (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n   *\n   * @param {Account} account\n   * @returns {Promise}\n   */\n  deleteAccount (account: Account): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.deleteAccount(account.getId(), () => {})\n      resolve()\n    })\n  }\n\n  /**\n   * Gets list of all accounts\n   *\n   * @returns Promise<Account[]>\n   */\n  getAccounts (): Promise<Account[]> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.getAccounts((successful, data) => {\n        if (successful) {\n          const accounts = []\n\n          for (const d of data) {\n            accounts.push(new Account(d))\n          }\n\n          resolve(accounts)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets an account by id\n   *\n   * @returns Promise<Account>\n   */\n  getAccount (accountId: number): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.getAccount(accountId, (successful, accountData) => {\n        if (successful) {\n          resolve(new Account(<AccountConfiguration>accountData))\n        } else {\n          reject(new Error(<string>accountData))\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets list of all calls\n   * TODO: Find out how well this works. I made it while not knowing alot about Objective C.\n   *\n   * @returns Promise<Call[]>\n   */\n  getCalls (): Promise<Call[]> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.getCalls((successful, data) => {\n        if (successful) {\n          const calls = []\n\n          for (const d of data) {\n            calls.push(new Call(d))\n          }\n\n          resolve(calls)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets an account by id\n   *\n   * @returns Promise<Account>\n   */\n  getCall (callId: number): Promise<Call> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.getCall(callId, (successful, callData) => {\n        if (successful) {\n          resolve(new Call(<CallData>callData))\n        } else {\n          reject(new Error(<string>callData))\n        }\n      })\n    })\n  }\n\n  /**\n   * Make an outgoing call to the specified URI.\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param callSettings {PJSIPCallSettings} Outgoing call settings.\n   * @param msgData {PJSIPMessageData} Outgoing call additional information to be sent with outgoing SIP message.\n   */\n  makeCall (account: Account, destination: string, callSettings?: PJSIPCallSettings, msgData?: PJSIPMessageData): Promise<Call> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      PjSipModule.makeCall(account.getId(), destination, callSettings, msgData, (successful, data) => {\n        if (successful) {\n          resolve(new Call(<CallData>data))\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Send response to incoming INVITE request.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  answerCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.answerCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Hangup call by using method that is appropriate according to the call state.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  hangupCall (call: Call): Promise<void> {\n    // TODO: Add possibility to pass code and reason for hangup.\n    return new Promise((resolve, reject) => {\n      PjSipModule.hangupCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Hangup call by using Decline (603) method.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  declineCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.declineCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  holdCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.holdCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unholdCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.unholdCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  muteCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.muteCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unMuteCall (call: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.unMuteCall(call.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  useSpeaker (): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.useSpeaker(() => {})\n      resolve()\n    })\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  useEarpiece (): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.useEarpiece(() => {})\n      resolve()\n    })\n  }\n\n  /**\n   * Initiate call transfer to the specified address.\n   * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  xferCall (account: Account, call: Call, destination: string): Promise<void> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      PjSipModule.xferCall(call.getId(), destination, (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Initiate attended call transfer.\n   * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n   * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n   *\n   * @param call {Call} The call to be transferred.\n   * @param destCall {Call} The call to be transferred.\n   * @returns {Promise}\n   */\n  xferReplacesCall (call: Call, destCall: Call): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.xferReplacesCall(call.getId(), destCall.getId(), (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Redirect (forward) specified call to destination.\n   * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  redirectCall (account: Account, call: Call, destination: string): Promise<void> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      PjSipModule.redirectCall(call.getId(), destination, (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  /**\n   * Send DTMF digits to remote using RFC 2833 payload formats.\n   *\n   * @param call {Call} Call instance\n   * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n   * @returns {Promise}\n   */\n  dtmfCall (call: Call, digits: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.dtmfCall(call.getId(), digits, (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  activateAudioSession (): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.activateAudioSession(() => {})\n      resolve()\n    })\n  }\n\n  deactivateAudioSession (): Promise<void> {\n    return new Promise((resolve, reject) => {\n      PjSipModule.deactivateAudioSession((successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(new Error(reason))\n        }\n      })\n    })\n  }\n\n  changeOrientation (orientation: Orientation): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.changeOrientation(orientation)\n      resolve()\n    })\n  }\n\n  changeCodecSettings (codecSettings: Object): Promise<void> {\n    return new Promise((resolve) => {\n      PjSipModule.changeCodecSettings(codecSettings, () => {})\n      resolve()\n    })\n  }\n\n  /**\n   * @fires Endpoint#registration_changed\n   * @private\n   * @param data {Object}\n   */\n  _onRegistrationChanged (data: AccountConfiguration): void {\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#registration_changed\n     * @property {Account} account\n     */\n    this.emit('registration_changed', new Account(data))\n  }\n\n  /**\n   * @fires Endpoint#call_received\n   * @private\n   * @param data {Object}\n   */\n  _onCallReceived (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_received\n     * @property {Call} call\n     */\n    this.emit('call_received', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_changed\n   * @private\n   * @param data {Object}\n   */\n  _onCallChanged (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_changed\n     * @property {Call} call\n     */\n    this.emit('call_changed', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_terminated\n   * @private\n   * @param data {Object}\n   */\n  _onCallTerminated (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_terminated\n     * @property {Call} call\n     */\n    this.emit('call_terminated', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_screen_locked\n   * @private\n   * @param lock bool\n   */\n  _onCallScreenLocked (lock: boolean): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_screen_locked\n     * @property bool lock\n     */\n    this.emit('call_screen_locked', lock)\n  }\n\n  /**\n   * @fires Endpoint#message_received\n   * @private\n   * @param data {Object}\n   */\n  _onMessageReceived (data: MessageData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#message_received\n     * @property {Message} message\n     */\n    this.emit('message_received', new Message(data))\n  }\n\n  /**\n   * @fires Endpoint#connectivity_changed\n   * @private\n   * @param available bool\n   */\n  _onConnectivityChanged (available: boolean): void {\n    /**\n     * @event Endpoint#connectivity_changed\n     * @property bool available True if connectivity matches current Network settings, otherwise false.\n     */\n    this.emit('connectivity_changed', available)\n  }\n\n  /**\n   * Normalize Destination URI\n   *\n   * @param account\n   * @param destination {string}\n   * @returns {string}\n   * @private\n   */\n  _normalize (account: Account, destination: string): string {\n    if (!destination.startsWith('sip:')) {\n      let realm = account.getProxy()\n\n      if (realm === null) {\n        realm = account.getDomain()\n\n        destination = `sip:${destination}@${realm}`\n      }\n\n      return destination\n    }\n\n  }\n\n}\n"],"file":"Endpoint.js"}