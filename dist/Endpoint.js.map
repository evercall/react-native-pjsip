{"version":3,"sources":["../src/Endpoint.ts"],"names":["DeviceEventEmitter","NativeModules","EventEmitter","Call","Message","Account","Endpoint","constructor","addListener","_onRegistrationChanged","bind","_onCallReceived","_onCallChanged","_onCallTerminated","_onCallScreenLocked","_onMessageReceived","_onConnectivityChanged","start","configuration","Promise","resolve","reject","PjSipModule","successful","data","accounts","calls","Object","prototype","hasOwnProperty","call","d","push","extra","key","stop","updateStunServers","accountId","stunServerList","changeNetworkConfiguration","changeServiceConfiguration","createAccount","replaceAccount","account","Error","registerAccount","renew","getId","deleteAccount","getAccounts","getAccount","getCalls","makeCall","destination","callSettings","msgData","_normalize","answerCall","hangupCall","declineCall","holdCall","unholdCall","muteCall","unMuteCall","useSpeaker","useEarpiece","xferCall","xferReplacesCall","destCall","redirectCall","dtmfCall","digits","activateAudioSession","deactivateAudioSession","changeOrientation","orientation","orientations","indexOf","JSON","stringify","join","changeCodecSettings","codecSettings","emit","lock","available","startsWith","realm","getProxy","undefined","getDomain"],"mappings":"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","sourcesContent":["import React, { DeviceEventEmitter, NativeModules } from 'react-native'\nimport { EventEmitter } from 'events'\n\nimport Call, { CallData } from './Call'\nimport Message, { MessageData } from './Message'\nimport Account, { AccountConfiguration } from './Account'\n\nexport type EndpointConfiguration = {}\n\n/**\n * SIP headers object, where each key is a header name and value is a header value.\n * Example:\n * {\n *   \"X-Custom-Header\": \"Test Header Value\",\n *   \"X-Custom-ID\": \"Awesome Header\"\n * }\n *\n * @typedef {Object} PjSipHdrList\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipMsgData\n * @property {String} target_uri - Indicates whether the Courage component is present.\n * @property {PjSipHdrList} hdr_list - Additional message headers as linked list.\n * @property {String} content_type - MIME type of optional message body.\n * @property {String} msg_body - MIME type of optional message body.\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipCallSetttings\n * @property {number} flag - Bitmask of #pjsua_call_flag constants.\n * @property {number} req_keyframe_method - This flag controls what methods to request keyframe are allowed on the call.\n * @property {number} aud_cnt - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n * @property {number} vid_cnt - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n */\n\nexport default class Endpoint extends EventEmitter {\n  constructor () {\n    super()\n\n    // Subscribe to Accounts events\n    DeviceEventEmitter.addListener('pjSipRegistrationChanged', this._onRegistrationChanged.bind(this))\n\n    // Subscribe to Calls events\n    DeviceEventEmitter.addListener('pjSipCallReceived', this._onCallReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallChanged', this._onCallChanged.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallTerminated', this._onCallTerminated.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallScreenLocked', this._onCallScreenLocked.bind(this))\n    DeviceEventEmitter.addListener('pjSipMessageReceived', this._onMessageReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipConnectivityChanged', this._onConnectivityChanged.bind(this))\n  }\n\n  /**\n   * Returns a Promise that will be resolved once PjSip module is initialized.\n   * Do not call any function while library is not initialized.\n   *\n   * @returns {Promise}\n   */\n  start (configuration: EndpointConfiguration): Promise<{\n    accounts: Account[],\n    calls: Call[],\n  }> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.start(configuration, (successful, data) => {\n        if (successful) {\n          const accounts = []\n          const calls = []\n\n          if (Object.prototype.hasOwnProperty.call(data, 'accounts')) {\n            for (const d of data.accounts) {\n              accounts.push(new Account(d))\n            }\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'calls')) {\n            for (const d of data.calls) {\n              calls.push(new Call(d))\n            }\n          }\n\n          const extra = {}\n\n          for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key) && key != 'accounts' && key != 'calls') {\n              extra[key] = data[key]\n            }\n          }\n\n          resolve({\n            accounts,\n            calls,\n            ...extra,\n          })\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  stop (): Promise<void> {\n    return new Promise((resolve) => {\n      NativeModules.PjSipModule.stop((successful, data) => {\n        resolve(data)\n      })\n      resolve()\n    })\n  }\n\n  updateStunServers (accountId: number, stunServerList: string[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.updateStunServers(accountId, stunServerList, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeNetworkConfiguration (configuration: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeNetworkConfiguration(configuration, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeServiceConfiguration (configuration: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeServiceConfiguration(configuration, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Add a new account. If registration is configured for this account, this function would also start the\n   * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n   * internally by the library, and application doesn't need to do anything to maintain the registration session.\n   *\n   * An example configuration:\n   * {\n   *   name: \"John Doe\",\n   *   username: \"100\",\n   *   domain: \"pbx.com\",\n   *   password: \"XXXXXX\",\n   *\n   *   proxy: \"192.168.100.1:5060\", // default disabled.\n   *   transport: \"TCP\", // default TCP\n   *   regServer: \"pbx.com\", // default taken from domain\n   *   regTimeout: 300, // default 300\n   * }\n   *\n   * @param {Object} configuration\n   * @returns {Promise}\n   */\n  createAccount (configuration: AccountConfiguration): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.createAccount(configuration, (successful, data) => {\n        if (successful) {\n          resolve(new Account(data))\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  replaceAccount (account: Account, configuration: AccountConfiguration): void {\n    throw new Error('Not implemented')\n  }\n\n  /**\n   * Update registration or perform unregistration.\n   * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n   * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n   *\n   * @param {Account} account\n   * @param renew renew If renew argument is zero, this will start unregistration process.\n   * @returns {Promise}\n   */\n  registerAccount (account: Account, renew = true): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.registerAccount(account.getId(), renew, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n   *\n   * @param {Account} account\n   * @returns {Promise}\n   */\n  deleteAccount (account: Account): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.deleteAccount(account.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets list of all accounts\n   *\n   * @returns Promise<Account[]>\n   */\n  getAccounts (): Promise<Account[]> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.getAccounts((successful, data) => {\n        if (successful) {\n          const accounts = []\n\n          for (const d of data) {\n            accounts.push(new Account(d))\n          }\n\n          resolve(accounts)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets an account by id\n   *\n   * @returns Promise<Account>\n   */\n  getAccount (accountId: number): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.getAccount(accountId, (successful, data) => {\n        if (successful) {\n          resolve(new Account(data))\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Gets list of all calls\n   *\n   * @returns Promise<Call[]>\n   */\n  getCalls (): Promise<Call[]> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.getCalls((successful, data) => {\n        if (successful) {\n          const calls = []\n\n          for (const d of data) {\n            calls.push(new Call(d))\n          }\n\n          resolve(calls)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Make an outgoing call to the specified URI.\n   * Available call settings:\n   * - audioCount - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n   * - videoCount - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n   * -\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param callSettings {PjSipCallSetttings} Outgoing call settings.\n   * @param msgData {PjSipMsgData} Outgoing call additional information to be sent with outgoing SIP message.\n   */\n  makeCall (account: Account, destination: string, callSettings?: any, msgData?: any): Promise<Call> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.makeCall(account.getId(), destination, callSettings, msgData, (successful, data) => {\n        if (successful) {\n          resolve(new Call(data))\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Send response to incoming INVITE request.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  answerCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.answerCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Hangup call by using method that is appropriate according to the call state.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  hangupCall (call: Call): Promise<any> {\n    // TODO: Add possibility to pass code and reason for hangup.\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.hangupCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Hangup call by using Decline (603) method.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  declineCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.declineCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  holdCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.holdCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unholdCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.unholdCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  muteCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.muteCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unMuteCall (call: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.unMuteCall(call.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  useSpeaker (): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.useSpeaker((successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  useEarpiece (): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.useEarpiece((successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Initiate call transfer to the specified address.\n   * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  xferCall (account: Account, call: Call, destination: string): Promise<any> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.xferCall(call.getId(), destination, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Initiate attended call transfer.\n   * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n   * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n   *\n   * @param call {Call} The call to be transferred.\n   * @param destCall {Call} The call to be transferred.\n   * @returns {Promise}\n   */\n  xferReplacesCall (call: Call, destCall: Call): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.xferReplacesCall(call.getId(), destCall.getId(), (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Redirect (forward) specified call to destination.\n   * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  redirectCall (account: Account, call: Call, destination: string): Promise<any> {\n    destination = this._normalize(account, destination)\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.redirectCall(call.getId(), destination, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * Send DTMF digits to remote using RFC 2833 payload formats.\n   *\n   * @param call {Call} Call instance\n   * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n   * @returns {Promise}\n   */\n  dtmfCall (call: Call, digits: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.dtmfCall(call.getId(), digits, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  activateAudioSession (): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.activateAudioSession((successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  deactivateAudioSession (): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.deactivateAudioSession((successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  changeOrientation (orientation: (\n    'PJMEDIA_ORIENT_UNKNOWN'\n    | 'PJMEDIA_ORIENT_ROTATE_90DEG'\n    | 'PJMEDIA_ORIENT_ROTATE_270DEG'\n    | 'PJMEDIA_ORIENT_ROTATE_180DEG'\n    | 'PJMEDIA_ORIENT_NATURAL'\n    )): void {\n    const orientations = [\n      'PJMEDIA_ORIENT_UNKNOWN',\n      'PJMEDIA_ORIENT_ROTATE_90DEG',\n      'PJMEDIA_ORIENT_ROTATE_270DEG',\n      'PJMEDIA_ORIENT_ROTATE_180DEG',\n      'PJMEDIA_ORIENT_NATURAL',\n    ]\n\n    if (orientations.indexOf(orientation) === -1) {\n      throw new Error(`Invalid ${JSON.stringify(orientation)} device orientation, but expected ${orientations.join(', ')} values`)\n    }\n\n    NativeModules.PjSipModule.changeOrientation(orientation)\n  }\n\n  changeCodecSettings (codecSettings: {\n    'opus/48000/2'?: number,\n    'G722/16000/1'?: number,\n    'G7221/16000/1'?: number,\n    'G7221/32000/1'?: number,\n    'GSM/8000/1'?: number,\n    'PCMA/8000/1'?: number,\n    'PCMU/8000/1'?: number,\n    'iLBC/8000/1'?: number,\n    'speex/8000/1'?: number,\n    'speex/16000/1'?: number,\n    'speex/32000/1'?: number,\n  }): Promise<any> {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeCodecSettings(codecSettings, (successful, data) => {\n        if (successful) {\n          resolve(data)\n        } else {\n          reject(data)\n        }\n      })\n    })\n  }\n\n  /**\n   * @fires Endpoint#registration_changed\n   * @private\n   * @param data {Object}\n   */\n  _onRegistrationChanged (data: AccountConfiguration): void {\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#registration_changed\n     * @property {Account} account\n     */\n    this.emit('registration_changed', new Account(data))\n  }\n\n  /**\n   * @fires Endpoint#call_received\n   * @private\n   * @param data {Object}\n   */\n  _onCallReceived (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_received\n     * @property {Call} call\n     */\n    this.emit('call_received', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_changed\n   * @private\n   * @param data {Object}\n   */\n  _onCallChanged (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_changed\n     * @property {Call} call\n     */\n    this.emit('call_changed', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_terminated\n   * @private\n   * @param data {Object}\n   */\n  _onCallTerminated (data: CallData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_terminated\n     * @property {Call} call\n     */\n    this.emit('call_terminated', new Call(data))\n  }\n\n  /**\n   * @fires Endpoint#call_screen_locked\n   * @private\n   * @param lock bool\n   */\n  _onCallScreenLocked (lock: boolean): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_screen_locked\n     * @property bool lock\n     */\n    this.emit('call_screen_locked', lock)\n  }\n\n  /**\n   * @fires Endpoint#message_received\n   * @private\n   * @param data {Object}\n   */\n  _onMessageReceived (data: MessageData): void {\n    /**\n     * TODO\n     *\n     * @event Endpoint#message_received\n     * @property {Message} message\n     */\n    this.emit('message_received', new Message(data))\n  }\n\n  /**\n   * @fires Endpoint#connectivity_changed\n   * @private\n   * @param available bool\n   */\n  _onConnectivityChanged (available: boolean): void {\n    /**\n     * @event Endpoint#connectivity_changed\n     * @property bool available True if connectivity matches current Network settings, otherwise false.\n     */\n    this.emit('connectivity_changed', available)\n  }\n\n  /**\n   * Normalize Destination URI\n   *\n   * @param account\n   * @param destination {string}\n   * @returns {string}\n   * @private\n   */\n  _normalize (account: Account, destination: string): string {\n    if (!destination.startsWith('sip:')) {\n      let realm = account.getProxy()\n\n      if (realm === undefined) {\n        realm = account.getDomain()\n\n        destination = `sip:${destination}@${realm}`\n      }\n\n      return destination\n    }\n\n  }\n\n}\n"],"file":"Endpoint.js"}