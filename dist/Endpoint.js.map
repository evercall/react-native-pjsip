{"version":3,"sources":["../src/Endpoint.ts"],"names":["DeviceEventEmitter","EventEmitter","PjSipModule","Call","Message","Account","Orientation","Endpoint","constructor","addListener","_onRegistrationChanged","bind","_onCallReceived","_onCallChanged","_onCallTerminated","_onCallScreenLocked","_onMessageReceived","_onConnectivityChanged","start","configuration","Promise","resolve","reject","success","data","accounts","map","account","calls","call","stop","updateStunServers","accountId","stunServerList","createAccount","registerAccount","renew","successful","reason","deleteAccount","getAccounts","getAccount","accountData","getCalls","getCall","callId","callData","makeCall","destination","callSettings","msgData","_sipifyNumber","id","answerCall","hangupCall","declineCall","holdCall","unholdCall","muteCall","unMuteCall","useSpeaker","useEarpiece","xferCall","xferReplacesCall","destCallId","redirectCall","dtmfCall","digits","activateAudioSession","deactivateAudioSession","changeOrientation","orientation","changeCodecSettings","codecSettings","emit","lock","available","number","startsWith","proxy","domain"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter } from 'react-native'\nimport { EventEmitter } from 'events'\nimport PjSipModule from './PjSipModule'\nimport Call, { CallData, PJSUACallFlags, PJSUAVideoReqKeyframeMethod } from './Call'\nimport Message, { MessageData } from './Message'\nimport Account, { IAccount } from './Account'\n\n/**\n * @example { 'speex/8000': 1 }\n */\nexport type Codec = {\n  /**\n   * @example speex/8000\n   */\n  [key: string]: number\n}\n\nexport enum Orientation {\n  PJMEDIA_ORIENT_NATURAL = 'PJMEDIA_ORIENT_NATURAL',\n  PJMEDIA_ORIENT_ROTATE_90DEG = 'PJMEDIA_ORIENT_ROTATE_90DEG',\n  PJMEDIA_ORIENT_ROTATE_270DEG = 'PJMEDIA_ORIENT_ROTATE_270DEG',\n  PJMEDIA_ORIENT_ROTATE_180DEG = 'PJMEDIA_ORIENT_ROTATE_180DEG'\n}\n\n/**\n * Not really documented.\n */\nexport interface StartConfiguration {\n  service: {\n    /** List of stun servers */\n    stun: string[]\n  }\n}\n\nexport interface PJSIPMessageData {\n  /**\n   * This structure describes additional information to be sent with\n   * outgoing SIP message. It can (optionally) be specified for example\n   * with #pjsua_call_make_call(), #pjsua_call_answer(), #pjsua_call_hangup(),\n   * #pjsua_call_set_hold(), #pjsua_call_send_im(), and many more.\n   *\n   * Application MUST call #pjsua_msg_data_init() to initialize this\n   * structure before setting its values.\n   */\n  targetURI?: string,\n  /**\n   * Additional message headers as linked list. Application can add\n   * headers to the list by creating the header, either from the heap/pool\n   * or from temporary local variable, and add the header using\n   * linked list operation. See pjsua_app.c for some sample codes.\n   */\n  headers?: Object[],\n\n  /**\n   * MIME type of optional message body.\n   */\n  contentType?: string,\n\n  /**\n   * Optional message body to be added to the message, only when the\n   * message doesn't have a body.\n   */\n  body?: string\n}\n\nexport interface PJSIPCallSettings {\n  /**\n   * Number of simultaneous active audio streams for this call. Setting\n   * this to zero will disable audio in this call.\n   *\n   * @default 1\n   */\n  audioCount?: number,\n\n  /**\n   * Number of simultaneous active video streams for this call. Setting\n   * this to zero will disable video in this call.\n   *\n   * @default 1 (if video feature is enabled, otherwise it is zero)\n   */\n  videoCount?: number,\n\n  /**\n   * Bitmask of #pjsua_call_flag constants.\n   *\n   * @default PJSUA_CALL_INCLUDE_DISABLED_MEDIA\n   */\n  flag?: PJSUACallFlags,\n\n  /**\n   * This flag controls what methods to request keyframe are allowed on\n   * the call. Value is bitmask of #pjsua_vid_req_keyframe_method.\n   *\n   * @default PJSUA_VID_REQ_KEYFRAME_SIP_INFO\n   */\n  requestKeyframeMethod?: PJSUAVideoReqKeyframeMethod\n}\n\nexport default class Endpoint extends EventEmitter {\n  constructor () {\n    super()\n\n    // Subscribe to Accounts events\n    DeviceEventEmitter.addListener('pjSipRegistrationChanged', this._onRegistrationChanged.bind(this))\n\n    // Subscribe to Calls events\n    DeviceEventEmitter.addListener('pjSipCallReceived', this._onCallReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallChanged', this._onCallChanged.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallTerminated', this._onCallTerminated.bind(this))\n    DeviceEventEmitter.addListener('pjSipCallScreenLocked', this._onCallScreenLocked.bind(this))\n    DeviceEventEmitter.addListener('pjSipMessageReceived', this._onMessageReceived.bind(this))\n    DeviceEventEmitter.addListener('pjSipConnectivityChanged', this._onConnectivityChanged.bind(this))\n  }\n\n  /**\n   * Returns a Promise that will be resolved once PjSip module is initialized.\n   * Do not call any function while library is not initialized.\n   */\n  start = (configuration: StartConfiguration): Promise<{\n    accounts: Account[],\n    calls: Call[],\n  }> =>\n    new Promise<{ accounts: Account[]; calls: Call[] }>(\n      (resolve, reject) =>\n        PjSipModule.start(configuration, (success, data) => (success) ?\n          {\n            accounts: data.accounts.map(account => new Account(account)),\n            calls: data.calls.map(call => new Call(call))\n          } : reject(configuration)\n        )\n    )\n\n  stop = (): Promise<void> => {\n    return new Promise<void>((resolve) => {\n      PjSipModule.stop(() => {})\n      resolve()\n    })\n  }\n\n  updateStunServers = (accountId: number, stunServerList: string[]): Promise<void> => {\n    return new Promise<void>((resolve) => {\n      PjSipModule.updateStunServers(accountId, stunServerList, () => {})\n      resolve()\n    })\n  }\n\n  /**\n   * Add a new account. If registration is configured for this account, this function would also start the\n   * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n   * internally by the library, and application doesn't need to do anything to maintain the registration session.\n   */\n  createAccount = (configuration: IAccount): Promise<Account> =>\n    new Promise<Account>(\n      (resolve, reject) => PjSipModule.createAccount(\n        configuration,\n        (success, account) => (success) ? resolve(new Account(account)) : reject(account)\n      )\n    )\n\n  /**\n   * Update registration or perform unregistration.\n   * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n   * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n   */\n  registerAccount = (accountId: number, renew = true): Promise<void> =>\n    new Promise((resolve, reject) => {\n      PjSipModule.registerAccount(accountId, renew, (successful, reason) => {\n        if (successful) {\n          resolve()\n        } else {\n          reject(reason)\n        }\n      })\n    })\n\n  /**\n   * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n   */\n  deleteAccount = (accountId: number): Promise<void> =>\n    new Promise((resolve) => {\n      PjSipModule.deleteAccount(accountId, () => {})\n      resolve()\n    })\n\n  /**\n   * Gets list of all accounts\n   */\n  getAccounts = (): Promise<Account[]> =>\n    new Promise<Account[]>(\n      (resolve, reject) =>\n        PjSipModule.getAccounts((success, data) => (success) ?\n          resolve(data.map(account => new Account(account)))\n          : reject(data)\n        )\n    )\n\n  /**\n   * Gets an account by id\n   */\n  getAccount = (accountId: number): Promise<Account> =>\n    new Promise<Account>((resolve, reject) =>\n      PjSipModule.getAccount(accountId, (successful, accountData) => (successful) ?\n        resolve(new Account(accountData)) :\n        reject(accountData)\n      )\n    )\n\n  /**\n   * Gets list of all calls\n   */\n  getCalls = (): Promise<Call[]> =>\n    new Promise<Call[]>((resolve, reject) => {\n      PjSipModule.getCalls((successful, data) => (successful) ?\n        resolve(data.map(call => new Call(call))) :\n        reject(data)\n      )\n    })\n\n  /**\n   * Gets an account by id\n   */\n  getCall = (callId: number): Promise<Call> =>\n    new Promise<Call>((resolve, reject) => {\n      PjSipModule.getCall(callId, (successful, callData) => (successful) ?\n        resolve(new Call(callData)) :\n        reject(callData)\n      )\n    })\n\n  /**\n   * Make an outgoing call to the specified URI.\n   */\n  makeCall = (account: IAccount, destination: string, callSettings?: PJSIPCallSettings, msgData?: PJSIPMessageData): Promise<Call> => {\n    destination = this._sipifyNumber(account, destination)\n\n    return new Promise<Call>((resolve, reject) =>\n      PjSipModule.makeCall(\n        account.id,\n        destination,\n        callSettings,\n        msgData,\n        (successful, data) => (successful) ? resolve(new Call(data)) : reject(data)\n      )\n    )\n  }\n\n  /**\n   * Send response to incoming INVITE request.\n   */\n  answerCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.answerCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  /**\n   * Hangup call by using method that is appropriate according to the call state.\n   */\n  hangupCall = (callId: number): Promise<void> =>\n    // TODO: Add possibility to pass code and reason for hangup.\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.hangupCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  /**\n   * Hangup call by using Decline (603) method.\n   */\n  declineCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.declineCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  /**\n   * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n   */\n  holdCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.holdCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  /**\n   * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n   */\n  unholdCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.unholdCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  muteCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.muteCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  unMuteCall = (callId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.unMuteCall(callId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  useSpeaker = (): Promise<void> =>\n    new Promise<void>((resolve) => {\n        PjSipModule.useSpeaker(() => {})\n        resolve()\n      }\n    )\n\n  useEarpiece = (): Promise<void> =>\n    new Promise<void>((resolve) => {\n      PjSipModule.useEarpiece(() => {})\n      resolve()\n    })\n\n  /**\n   * Initiate call transfer to the specified address.\n   * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n   */\n  xferCall = (account: IAccount, callId: number, destination: string): Promise<void> => {\n    destination = this._sipifyNumber(account, destination)\n\n    return new Promise<void>((resolve, reject) =>\n      PjSipModule.xferCall(callId, destination, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n  }\n\n  /**\n   * Initiate attended call transfer.\n   * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n   * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n   */\n  xferReplacesCall = (callId: number, destCallId: number): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.xferReplacesCall(callId, destCallId, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  /**\n   * Redirect (forward) specified call to destination.\n   * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n   */\n  redirectCall = (account: IAccount, callId: number, destination: string): Promise<void> => {\n    destination = this._sipifyNumber(account, destination)\n\n    return new Promise<void>((resolve, reject) =>\n      PjSipModule.redirectCall(callId, destination, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n  }\n\n  /**\n   * Send DTMF digits to remote using RFC 2833 payload formats.\n   */\n  dtmfCall = (callId: number, digits: string): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.dtmfCall(callId, digits, (successful, reason) => (successful) ?\n        resolve() :\n        reject(reason)\n      )\n    )\n\n  activateAudioSession = (): Promise<void> =>\n    new Promise<void>((resolve) => {\n      PjSipModule.activateAudioSession(() => {})\n      resolve()\n    })\n\n  deactivateAudioSession = (): Promise<void> =>\n    new Promise<void>((resolve, reject) =>\n      PjSipModule.deactivateAudioSession((successful, reason) => (successful) ? resolve() :\n        reject(reason)\n      )\n    )\n\n  changeOrientation = (orientation: Orientation): Promise<void> =>\n    new Promise<void>((resolve) => {\n      PjSipModule.changeOrientation(orientation)\n      resolve()\n    })\n\n  changeCodecSettings = (codecSettings: Object): Promise<void> =>\n    new Promise((resolve) => {\n      PjSipModule.changeCodecSettings(codecSettings, () => {})\n      resolve()\n    })\n\n  /**\n   * @fires Endpoint#registration_changed\n   * @private\n   * @param data {Object}\n   */_onRegistrationChanged = (data: IAccount): boolean =>\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#registration_changed\n     * @property {Account} account\n     */\n    this.emit('registration_changed', new Account(data))\n\n  /**\n   * @fires Endpoint#call_received\n   * @private\n   * @param data {Object}\n   */_onCallReceived = (data: CallData): boolean =>\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_received\n     * @property {Call} call\n     */\n    this.emit('call_received', new Call(data))\n\n  /**\n   * @fires Endpoint#call_changed\n   * @private\n   * @param data {Object}\n   */_onCallChanged = (data: CallData): boolean =>\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_changed\n     * @property {Call} call\n     */\n    this.emit('call_changed', new Call(data))\n\n  /**\n   * @fires Endpoint#call_terminated\n   * @private\n   * @param data {Object}\n   */_onCallTerminated = (data: CallData): boolean =>\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_terminated\n     * @property {Call} call\n     */\n    this.emit('call_terminated', new Call(data))\n\n  /**\n   * @fires Endpoint#call_screen_locked\n   * @private\n   * @param lock bool\n   */_onCallScreenLocked = (lock: boolean): boolean =>\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_screen_locked\n     * @property bool lock\n     */\n    this.emit('call_screen_locked', lock)\n\n  /**\n   * @fires Endpoint#message_received\n   * @private\n   * @param data {Object}\n   */_onMessageReceived = (data: MessageData): boolean =>\n    /**\n     * TODO\n     *\n     * @event Endpoint#message_received\n     * @property {Message} message\n     */\n    this.emit('message_received', new Message(data))\n\n  /**\n   * @fires Endpoint#connectivity_changed\n   * @private\n   * @param available bool\n   */_onConnectivityChanged = (available: boolean): boolean =>\n    /**\n     * @event Endpoint#connectivity_changed\n     * @property bool available True if connectivity matches current Network settings, otherwise false.\n     */\n    this.emit('connectivity_changed', available)\n\n  /**\n   * Sipify number\n   *\n   * @param account\n   * @param number {string}\n   * @returns {string}\n   * @private\n   */\n  _sipifyNumber = (account: IAccount, number: string): string =>\n    number.startsWith('sip:') ?\n      number :\n      (account.proxy !== null) ?\n        `sip:${number}@${account.proxy}` :\n        `sip:${number}@${account.domain}`\n\n}\n"],"file":"Endpoint.js"}